#include "gtest/gtest.h"

#include "amf.hpp"
#include "types/amfinteger.hpp"

template <size_t N>
static void isEqual(u8 (&expected)[N], int value) {
	ASSERT_EQ(make_vector(expected), AmfInteger(value).serialize());
}

TEST(IntegerSerializationTest, PositiveInteger1Byte) {
	u8 v1[] = { 0x04, 0x00 };
	isEqual(v1, 0);
	u8 v2[] = { 0x04, 0x01 };
	isEqual(v2, 1);
	u8 v3[] = { 0x04, 0x7E };
	isEqual(v3, 0x7e);
	u8 v4[] = { 0x04, 0x7F };
	isEqual(v4, 0x7f);
}

TEST(IntegerSerializationTest, PositiveInteger2Byte) {
	u8 v1[] = { 0x04, 0x81, 0x00 };
	isEqual(v1, 0x80);
	u8 v2[] = { 0x04, 0x87, 0x7E };
	isEqual(v2, 0x3fe);
	u8 v3[] = { 0x04, 0x87, 0x7F };
	isEqual(v3, 0x3ff);
	u8 v4[] = { 0x04, 0x88, 0x00 };
	isEqual(v4, 0x400);
}

TEST(IntegerSerializationTest, PositiveInteger3Byte) {
	u8 v1[] = { 0x04, 0xFF, 0xFF, 0x7E };
	isEqual(v1, 0x1ffffe);
	u8 v2[] = { 0x04, 0xFF, 0xFF, 0x7F };
	isEqual(v2, 0x1fffff);
}

TEST(IntegerSerializationTest, PositiveInteger4Byte) {
	u8 v1[] = { 0x04, 0x80, 0xC0, 0x80, 0x00 };
	isEqual(v1, 0x200000);
	u8 v2[] = { 0x04, 0xBF, 0xFF, 0xFF, 0xFE };
	isEqual(v2, 0xffffffe);
	u8 v3[] = { 0x04, 0xBF, 0xFF, 0xFF, 0xFF };
	isEqual(v3, 0xfffffff);
}

TEST(IntegerSerializationTest, PositiveIntegerLarge) {
	u8 v1[] = { 0x05, 0x41, 0xBF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00 };
	isEqual(v1, 0x1ffffffe);
	u8 v2[] = { 0x05, 0x41, 0xBF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00 };
	isEqual(v2, 0x1fffffff);
	u8 v3[] = { 0x05, 0x41, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	isEqual(v3, 0x20000000);
	u8 v4[] = { 0x05, 0x41, 0xDF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00 };
	isEqual(v4, 0x7ffffffe);
	u8 v5[] = { 0x05, 0x41, 0xDF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00 };
	isEqual(v5, 0x7fffffff);
	u8 v6[] = { 0x05, 0x41, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	isEqual(v6, 0x10000000);
}

TEST(IntegerSerializationTest, NegativeInteger) {
	u8 v1[] = { 0x04, 0xFF, 0xFF, 0xFF, 0xFF };
	isEqual(v1, -1);
	u8 v2[] = { 0x04, 0xFF, 0xFF, 0xFF, 0xFE };
	isEqual(v2, -2);
	u8 v3[] = { 0x04, 0xFF, 0xFF, 0xFF, 0xFD };
	isEqual(v3, -3);
	u8 v4[] = { 0x04, 0xFF, 0xFF, 0xFF, 0xFC };
	isEqual(v4, -4);
	u8 v5[] = { 0x04, 0xFF, 0xFF, 0xFF, 0xF9 };
	isEqual(v5, -7);
	u8 v6[] = { 0x04, 0xFF, 0xFF, 0xFF, 0xF8 };
	isEqual(v6, -8);
	u8 v7[] = { 0x04, 0xFF, 0xFF, 0xFF, 0xE1 };
	isEqual(v7, -31);
	u8 v8[] = { 0x04, 0xFF, 0xFF, 0xFF, 0xE0 };
	isEqual(v8, -32);
	u8 v9[] = { 0x04, 0xFF, 0xFF, 0xFF, 0x81 };
	isEqual(v9, -127);
	u8 v10[] = { 0x04, 0xFF, 0xFF, 0xFF, 0x80 };
	isEqual(v10, -128);
	u8 v11[] = { 0x04, 0xFF, 0xFF, 0xFF, 0x7F };
	isEqual(v11, -129);
	u8 v12[] = { 0x04, 0xFF, 0xFF, 0xC0, 0x01 };
	isEqual(v12, -16383);
	u8 v13[] = { 0x04, 0xFF, 0xFF, 0xC0, 0x00 };
	isEqual(v13, -16384);
	u8 v14[] = { 0x04, 0xFF, 0xFF, 0xBF, 0xFF };
	isEqual(v14, -16385);
	u8 v15[] = { 0x04, 0xFF, 0xC0, 0x80, 0x01 };
	isEqual(v15, -2097151);
	u8 v16[] = { 0x04, 0xFF, 0xC0, 0x80, 0x00 };
	isEqual(v16, -2097152);
	u8 v17[] = { 0x04, 0xFF, 0xBF, 0xFF, 0xFF };
	isEqual(v17, -2097153);
	u8 v18[] = { 0x04, 0xC0, 0x80, 0x80, 0x01 };
	isEqual(v18, -268435455);
	u8 v19[] = { 0x04, 0xC0, 0x80, 0x80, 0x00 };
	isEqual(v19, -268435456);
}

TEST(IntegerSerializationTest, NegativeIntegerLarge) {
	u8 v1[] = { 0x05, 0xC1, 0xB0, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 };
	isEqual(v1, -268435457);
	u8 v2[] = { 0x05, 0xC1, 0xDC, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00 };
	isEqual(v2, -1879048193);
	u8 v3[] = { 0x05, 0xC1, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	isEqual(v3, -2147483647 - 1);
}
